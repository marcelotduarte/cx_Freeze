name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-14]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        include:
          - os: macos-13  # macos-13 is x86_64
            python-version: '3.9'
          - os: macos-13
            python-version: '3.10'
        exclude:
          - os: macos-14  # macos-14 is arm64 (apple silicon)
            python-version: '3.9'
          - os: macos-14
            python-version: '3.10'
    defaults:
      run:
        shell: bash
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/requirements.txt
            **/requirements-test.txt

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y alien fakeroot rpm

      - name: Install dependencies and build tools
        run: uv pip install --system build -r requirements.txt -r requirements-dev.txt

      - name: Bump new dev version
        if: github.event_name == 'pull_request'
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          git config user.name "Marcelo Duarte"
          git config user.email marcelotduarte@users.noreply.github.com
          VERSION=$(bump-my-version show current_version 2>/dev/null)
          if ! (echo $VERSION | grep -q "\-dev"); then
            bump-my-version bump --no-tag minor 2>/dev/null
            VERSION=$(bump-my-version show current_version 2>/dev/null)
          fi
          NEWVERSION=$(python -c "print('$VERSION'.rsplit('.',1)[0])").$PR_NUMBER
          bump-my-version bump --no-tag build --new-version=$NEWVERSION 2>/dev/null
          git log -1

      - name: Build wheel for Python ${{ matrix.python-version }} [Windows]
        if: runner.os == 'Windows'
        run: pyproject-build -n -x -w -o wheelhouse

      - name: Build wheel for Python ${{ matrix.python-version }} [Linux/macOS]
        if: runner.os != 'Windows'
        env:
          CIBW_BUILD_FRONTEND: build[uv]
        run: |
          PYTHON_TAG=cp$(echo ${{ matrix.python-version }}|sed 's/\.//')
          ARCH=$(python -c "import platform; print(platform.machine().lower())")
          if [ "${{ runner.os }}" == "Linux" ]; then
            PLATFORM_TAG=manylinux_$ARCH
          elif [ "${{ runner.os }}" == "Windows" ]; then
            PLATFORM_TAG=win_$ARCH
          else
            PLATFORM_TAG=macosx_$ARCH
          fi
          cibuildwheel --only ${PYTHON_TAG}-${PLATFORM_TAG} --prerelease-pythons

      - name: Upload the wheel
        uses: actions/upload-artifact@v4
        with:
          name: cx-freeze-pip-${{ matrix.os }}-${{ matrix.python-version }}
          path: wheelhouse
          retention-days: 2
          compression-level: 0  # wheel is a zip file

      - name: Install cx_Freeze and pytest dependencies
        run: |
          uv pip install --system -r requirements-test.txt
          uv pip install --system cx_Freeze --no-index --no-deps -f wheelhouse --reinstall

      - name: Generate coverage report
        run: pytest -nauto --cov="cx_Freeze" --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          use_oidc: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  tests_extra:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        python-version: ['3.10']
        extra-requirement:
          - lief==0.14.1
          - lief==0.13.2
          - lief-disabled
          - pywin32
    defaults:
      run:
        shell: bash
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/requirements.txt
            **/requirements-test.txt

      - name: Install dependencies
        run: uv pip install --system -e.[test]

      - name: Generate coverage report
        run: |
          if [ "${{ matrix.extra-requirement }}" == "lief-disabled" ]; then
            export CX_FREEZE_BIND=imagehlp
          else
            uv pip install --system "${{ matrix.extra-requirement }}"
          fi
          pytest -nauto --cov="cx_Freeze" --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          use_oidc: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  tests_unix_binary_wheel:
    needs:
      - tests  # reuse the wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10', '3.12']
    defaults:
      run:
        shell: bash
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/requirements.txt
            **/requirements-test.txt

      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          name: cx-freeze-pip-${{ matrix.os }}-${{ matrix.python-version }}
          path: wheelhouse

      - name: Install dependencies
        run: |
          uv pip install --system -r requirements.txt -r requirements-test.txt
          uv pip install --system cx_Freeze --no-index --no-deps -f wheelhouse --reinstall

      - name: Install dependencies - extra
        run: |
          if [ "${{ matrix.python-version }}" == "3.10" ]; then
            uv pip install --system -i https://pypi.anaconda.org/intel/simple numpy
          fi
          uv pip install --system pandas

      - name: Generate coverage report
        run: pytest -nauto --cov="cx_Freeze" --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          use_oidc: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
