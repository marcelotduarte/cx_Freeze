[build-system]
requires = [
    "setuptools>=62.6",
    "wheel>=0.38.4",
    "cx_Logging>=3.1 ;sys_platform == 'win32'",
]
build-backend = "setuptools.build_meta"

[project]
name = "cx_Freeze"
version = "6.16.0-dev0"
description = "Create standalone executables from Python scripts"
authors = [{name = "Anthony Tuininga", email = "anthony.tuininga@gmail.com"}]
maintainers = [{name = "Marcelo Duarte", email = "marcelotduarte@users.noreply.github.com"}]
license = {text = "Python Software Foundation License"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Python Software Foundation License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: C",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Software Distribution",
    "Topic :: Utilities",
]
keywords = ["cx-freeze cxfreeze cx_Freeze freeze python"]
requires-python = ">=3.7.4"
dependencies = [
    "setuptools>=62.6,<68",
    "cx_Logging>=3.1 ;sys_platform == 'win32'",
    "lief>=0.12.0 ;sys_platform == 'win32'",
    "patchelf>=0.14 ;sys_platform == 'linux' and platform_machine == 'x86_64'",
    "patchelf>=0.14 ;sys_platform == 'linux' and platform_machine == 'i686'",
    "patchelf>=0.14 ;sys_platform == 'linux' and platform_machine == 'aarch64'",
    "patchelf>=0.17.2.1 ;sys_platform == 'linux' and platform_machine == 'armv7l'",
    "patchelf>=0.14 ;sys_platform == 'linux' and platform_machine == 'ppc64le'",
    "patchelf>=0.14 ;sys_platform == 'linux' and platform_machine == 's390x'",
]

[project.optional-dependencies]
dev = [
    "bump2version==1.0.1",
    "cibuildwheel==2.13.1",
    "pre-commit>=2.21.0",
    "pylint==2.17.4",
    "wheel==0.40.0",
]
doc = [
    "sphinx==5.3.0",
    "sphinx-tabs==3.4.1",
    "furo==2023.3.27",
]
test = [
    "nose==1.3.7",
    "pygments==2.15.1",
    "pytest==7.3.2",
    "pytest-cov==4.1.0",
    "pytest-mock==3.11.1",
    "pytest-timeout==2.1.0",
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Home = "https://marcelotduarte.github.io/cx_Freeze"
Changelog = "https://cx-freeze.readthedocs.io/en/latest/releasenotes.html"
Documentation = "https://cx-freeze.readthedocs.io"
Source = "https://github.com/marcelotduarte/cx_Freeze"
Tracker = "https://github.com/marcelotduarte/cx_Freeze/issues"
Workflows = "https://github.com/marcelotduarte/cx_Freeze/actions?query=branch:main"

[project.scripts]
cxfreeze = "cx_Freeze.cli:main"
cxfreeze-quickstart = "cx_Freeze.setupwriter:main"

[project.entry-points."distutils.setup_keywords"]
executables = "cx_Freeze.executable:validate_executables"

[project.entry-points."setuptools.finalize_distribution_options"]
cxfreeze-plugin = "cx_Freeze:plugin_install"

[tool.setuptools]
include-package-data = true
zip-safe = false
license-files = ["doc/src/license.rst"]

[tool.setuptools.packages]
find = {namespaces = false}

[tool.distutils.bdist_wheel]
universal = 0

[tool.black]
line-length = 79
target-version = ["py37"]
exclude = "tests/samples/invalid_syntax.py"

[tool.isort]
profile = "black"
line_length = 79
skip_gitignore = true
add_imports = ["from __future__ import annotations"]

[tool.ruff]
select = [
    "A",   # flake8-builtins
    "E", "F", "W",  # flake8
    "B",  "B904",  # flake8-bugbear
    "D",  # pydocstyle
    "I",  # isort
    "ARG",  # flake8-unused-arguments
    "C4",  # flake8-comprehensions
    #"EM",  # flake8-errmsg
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PLC", "PLE", "PLR", "PLW",  # pylint
    "PT",  # flake8-pytest-style
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "RUF",  # Ruff-specific
    "SIM",  # flake8-simplify
    "UP",  # pyupgrade
    "YTT",  # flake8-2020
]
ignore = [
    # ignored for now, but should be revised in future
    "D102",  # Missing docstring in public method
    "D104",  # Missing docstring in public package
    "D401",  # First line of docstring should be in imperative mood
    # ignore the following
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in `__init__`
    "D203", "D205", "D213",
    "PLR2004", "E501",
    "PLR0912",  # too-many-branches
    "PLR0913",  # too-many-arguments
    "PLR0915",  # too-many-statements
]
line-length = 79
target-version = "py37"
flake8-unused-arguments.ignore-variadic-names = true
extend-exclude = [
    "samples/*.py",
    "tests/samples/*.py",
    "tests/samples/invalid_syntax.py",
]

[tool.pylint.main]
disable = [
    "c-extension-no-member",
    "duplicate-code",
    "fixme",
    "import-error",
    "missing-function-docstring",   # checked by ruff D103
    "redefined-builtin",  # checked by ruff A
    "too-few-public-methods",
    "too-many-arguments",  # ignore by ruff too
    "too-many-branches",  # ignore by ruff too
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-return-statements",  # checked by ruff PLR0911
    "too-many-statements",  # ignore by ruff too
    "unused-argument",  # checked by ruff ARG
]
ignore-paths = [
    "cx_Freeze/darwintools.py",
    "cx_Freeze/hooks/pyside2/resource.py",
    "cx_Freeze/hooks/pyside6/resource.py",
    "doc/src/conf.py",
    "^samples/.*.py$",
    "^tests/samples/.*.py$",
]
py-version = [3, 7]
output-format = "colorized"

[tool.pylint.format]
max-line-length = 79

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra"
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning:distutils.*",
    "ignore::DeprecationWarning:pkg_resources.*",
    "ignore::DeprecationWarning:setuptools.*",
]

[tool.cibuildwheel]
build = "cp3*"
build-frontend = "build"
build-verbosity = "1"
manylinux-x86_64-image = "quay.io/pypa/manylinux2014_x86_64:latest"

[tool.cibuildwheel.linux]
archs = "x86_64 aarch64"
before-build = """
cd /opt/_internal && tar -xvf static-libs-for-embedding-only.tar.xz
"""
repair-wheel-command = "auditwheel repair -L /bases/lib -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
archs = "x86_64 universal2 arm64"
skip = "cp38-macosx_universal2 cp38-macosx_arm64"
repair-wheel-command = """
delocate-listdeps {wheel} &&
delocate-wheel --require-archs {delocate_archs} -L bases/lib -w {dest_dir} {wheel}
"""
